"use client";
import { useState, useRef } from "react";
import "./styles.css";
import "./stylesMobileProjects.css";
import ProjectCard from "./ProjectCard/ProjectCard.jsx";
import ProjectTag from "./ProjectTag/ProjectTag";
import ProjectsData from "./ProjectData.js";
import { Swiper, SwiperSlide } from "swiper/react";
import "swiper/css/bundle";
import { Navigation, Pagination } from "swiper/modules";

export const Projects = () => {
  const [tag, setTag] = useState("All");
  const ref = useRef(null);
  // const inInView = useInView(ref, { once: true });

  const handleTagChange = (newTag) => {
    setTag(newTag);
  };

  const filteredProjects = ProjectsData.filter((project) =>
    project.tag.includes(tag)
  );

  // const cardVariants = {
  //   initial: { y: 50, opacity: 0 },
  //   animate: { y: 0, opacity: 1 },
  // };

  return (
    <section id="project" className="projects">
      <h2 className="project__title">Meus Projetos</h2>
      <div className="project__tags">
        <ProjectTag
          onClick={handleTagChange}
          name="All"
          isSelected={tag === "All"}
        />
        <ProjectTag
          onClick={handleTagChange}
          name="Frontend"
          isSelected={tag === "Frontend"}
        />
        <ProjectTag
          onClick={handleTagChange}
          name="Backend"
          isSelected={tag === "Backend"}
        />
      </div>
      <Swiper
        slidesPerView={1}
        spaceBetween={30}
        breakpoints={{
          640: {
            slidesPerView: 2,
            spaceBetween: 20,
          },
          768: {
            slidesPerView: 3,
            spaceBetween: 40,
          },
        }}
        pagination={{
          clickable: true,
        }}
        navigation={true}
        modules={[Navigation, Pagination]}
        className="custom-swiper"
      >
        {filteredProjects.map((project, index) => (
          <SwiperSlide key={index} className="custom-swiper-slide">
            <ProjectCard
              key={project.id}
              title={project.title}
              description={project.description}
              imgUrl={project.image}
              gitUrl={project.gitUrl}
              previewUrl={project.previewUrl}
            />
          </SwiperSlide>
        ))}
      </Swiper>
    </section>
  );
};





"use client";
import { useState, useRef } from "react";
import "./styles.css";
import "./stylesMobileProjects.css";
import ProjectCard from "./ProjectCard/ProjectCard.jsx";
import ProjectTag from "./ProjectTag/ProjectTag";
import ProjectsData from "./ProjectData.js";

export const Projects = () => {
  const [tag, setTag] = useState("All");
  const ref = useRef(null);
  // const inInView = useInView(ref, { once: true });

  const handleTagChange = (newTag) => {
    setTag(newTag);
  };

  const filteredProjects = ProjectsData.filter((project) =>
    project.tag.includes(tag)
  );

  // const cardVariants = {
  //   initial: { y: 50, opacity: 0 },
  //   animate: { y: 0, opacity: 1 },
  // };

  return (
    <section id="project" className="projects">
      <h2 className="project__title">Meus Projetos</h2>
      <div className="project__tags">
        <ProjectTag
          onClick={handleTagChange}
          name="All"
          isSelected={tag === "All"}
        />
        <ProjectTag
          onClick={handleTagChange}
          name="Frontend"
          isSelected={tag === "Frontend"}
        />
        <ProjectTag
          onClick={handleTagChange}
          name="Backend"
          isSelected={tag === "Backend"}
        />
      </div>
      <ul ref={ref} className="project__list">
        {filteredProjects.map((project, index) => (
          <div
            key={index}
            // variants={cardVariants}
            initial="initial"
            // animate={isInView ? "animate" : "initial"}
            // tansition={{ duration: 0.3, delay: index *  0.4 }}
          >
            <ProjectCard
              key={project.id}
              title={project.title}
              description={project.description}
              imgUrl={project.image}
              gitUrl={project.gitUrl}
              previewUrl={project.previewUrl}
            />
          </div>
        ))}
      </ul>
    </section>
  );
};
